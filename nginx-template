# ------------------------------------------------------------
# 1) HTTP (port 80): ACME + redirect to HTTPS
# ------------------------------------------------------------
server {
    listen 80;
    listen [::]:80;
    server_name domain.com www.domain.com;

    # Let's Encrypt HTTP-01 challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/letsencrypt;
        default_type "text/plain";
    }

    # Redirect everything else to HTTPS on apex
    location / {
        return 301 https://domain.com$request_uri;
    }
}

# ------------------------------------------------------------
# 2) HTTPS (port 443): frontend (/) + backend (/api)
# ------------------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name domain.com;

    # --- TLS ---
    ssl_certificate     /etc/letsencrypt/live/domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # --- HSTS ---
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # --- Frontend: static SPA ---
    root /var/www/E621-Account-Parser/parser-web/dist;
    index index.html;

    # No cache for configuration
    location = /static/config.js {
        try_files $uri = 404;

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;         # for older proxies
        add_header Expires "0" always;

        etag off;
        expires off;
    }

    # Long-cache for hashed assets
    location ~* \.(wasm|js|mjs|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
        access_log off;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }

    # Service worker & manifest (lighter caching)
    location ~* /(manifest\.json|manifest\.webmanifest|service-worker\.js)$ {
        add_header Cache-Control "public, max-age=3600, must-revalidate";
        try_files $uri =404;
    }

    # SPA fallback for client-side routes
    location / {
        # Handle preflight if you ever re-enable CORS for some paths
        if ($request_method = OPTIONS) { return 204; }
        try_files $uri $uri/ /index.html;
    }

    # --- Backend: reverse proxy under /api -> local :8080 ---
    location /api/ {
        proxy_pass http://127.0.0.1:8080;

        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support (just in case)
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        $connection_upgrade;

        proxy_read_timeout  300;
        proxy_send_timeout  300;

        client_max_body_size 50m;
    }

    # Compression â€” include WASM explicitly
    gzip on;
    gzip_min_length 1024;
    gzip_types application/wasm application/javascript text/css application/json;
}

# ------------------------------------------------------------
# 3) explicit www -> apex on HTTPS
# ------------------------------------------------------------
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name www.domain.com;

    ssl_certificate     /etc/letsencrypt/live/domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;
    return 301 https://domain.com$request_uri;
}